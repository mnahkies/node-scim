/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import KoaRouter, {RouterContext} from "@koa/router"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  Response,
  StatusCode,
} from "@nahkies/typescript-koa-runtime/server"
import {
  Params,
  parseRequestInput,
  responseValidationFactory,
} from "@nahkies/typescript-koa-runtime/zod"
import {z} from "zod"
import {
  t_DeleteScimV2GroupsIdParamSchema,
  t_DeleteScimV2UsersIdParamSchema,
  t_GetScimV2GroupsIdParamSchema,
  t_GetScimV2GroupsQuerySchema,
  t_GetScimV2UsersIdParamSchema,
  t_GetScimV2UsersQuerySchema,
  t_Group,
  t_GroupCollection,
  t_PatchScimV2GroupsIdBodySchema,
  t_PatchScimV2GroupsIdParamSchema,
  t_PatchScimV2UsersIdBodySchema,
  t_PatchScimV2UsersIdParamSchema,
  t_PostScimV2GroupsBodySchema,
  t_PostScimV2UsersBodySchema,
  t_PutScimV2GroupsIdBodySchema,
  t_PutScimV2GroupsIdParamSchema,
  t_PutScimV2UsersIdBodySchema,
  t_PutScimV2UsersIdParamSchema,
  t_User,
  t_UserCollection,
  t_getScimV2ResourceTypesJson200Response,
  t_getScimV2SchemasJson200Response,
  t_getScimV2ServiceProviderConfigJson200Response,
} from "../models"
import {
  s_Group,
  s_GroupCollection,
  s_GroupDefinition,
  s_GroupPatchOp,
  s_User,
  s_UserCollection,
  s_UserDefinition,
  s_UserPatchOp,
  s_getScimV2ResourceTypesJson200Response,
  s_getScimV2SchemasJson200Response,
  s_getScimV2ServiceProviderConfigJson200Response,
} from "../schemas"

export type GetScimV2UsersResponder = {
  with200(): KoaRuntimeResponse<t_UserCollection>
} & KoaRuntimeResponder

export type GetScimV2Users = (
  params: Params<void, t_GetScimV2UsersQuerySchema, void>,
  respond: GetScimV2UsersResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_UserCollection>>

export type PostScimV2UsersResponder = {
  with201(): KoaRuntimeResponse<t_User>
} & KoaRuntimeResponder

export type PostScimV2Users = (
  params: Params<void, void, t_PostScimV2UsersBodySchema>,
  respond: PostScimV2UsersResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_User>>

export type GetScimV2UsersIdResponder = {
  with200(): KoaRuntimeResponse<t_User>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type GetScimV2UsersId = (
  params: Params<t_GetScimV2UsersIdParamSchema, void, void>,
  respond: GetScimV2UsersIdResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_User> | Response<404, void>
>

export type PutScimV2UsersIdResponder = {
  with200(): KoaRuntimeResponse<t_User>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type PutScimV2UsersId = (
  params: Params<
    t_PutScimV2UsersIdParamSchema,
    void,
    t_PutScimV2UsersIdBodySchema
  >,
  respond: PutScimV2UsersIdResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_User> | Response<404, void>
>

export type PatchScimV2UsersIdResponder = {
  with200(): KoaRuntimeResponse<t_User>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type PatchScimV2UsersId = (
  params: Params<
    t_PatchScimV2UsersIdParamSchema,
    void,
    t_PatchScimV2UsersIdBodySchema
  >,
  respond: PatchScimV2UsersIdResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_User> | Response<404, void>
>

export type DeleteScimV2UsersIdResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type DeleteScimV2UsersId = (
  params: Params<t_DeleteScimV2UsersIdParamSchema, void, void>,
  respond: DeleteScimV2UsersIdResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

export type GetScimV2GroupsResponder = {
  with200(): KoaRuntimeResponse<t_GroupCollection>
} & KoaRuntimeResponder

export type GetScimV2Groups = (
  params: Params<void, t_GetScimV2GroupsQuerySchema, void>,
  respond: GetScimV2GroupsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_GroupCollection>>

export type PostScimV2GroupsResponder = {
  with201(): KoaRuntimeResponse<t_Group>
} & KoaRuntimeResponder

export type PostScimV2Groups = (
  params: Params<void, void, t_PostScimV2GroupsBodySchema>,
  respond: PostScimV2GroupsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_Group>>

export type GetScimV2GroupsIdResponder = {
  with200(): KoaRuntimeResponse<t_Group>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type GetScimV2GroupsId = (
  params: Params<t_GetScimV2GroupsIdParamSchema, void, void>,
  respond: GetScimV2GroupsIdResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_Group> | Response<404, void>
>

export type PutScimV2GroupsIdResponder = {
  with200(): KoaRuntimeResponse<t_Group>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type PutScimV2GroupsId = (
  params: Params<
    t_PutScimV2GroupsIdParamSchema,
    void,
    t_PutScimV2GroupsIdBodySchema
  >,
  respond: PutScimV2GroupsIdResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_Group> | Response<404, void>
>

export type PatchScimV2GroupsIdResponder = {
  with200(): KoaRuntimeResponse<t_Group>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type PatchScimV2GroupsId = (
  params: Params<
    t_PatchScimV2GroupsIdParamSchema,
    void,
    t_PatchScimV2GroupsIdBodySchema
  >,
  respond: PatchScimV2GroupsIdResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_Group> | Response<404, void>
>

export type DeleteScimV2GroupsIdResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type DeleteScimV2GroupsId = (
  params: Params<t_DeleteScimV2GroupsIdParamSchema, void, void>,
  respond: DeleteScimV2GroupsIdResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

export type GetScimV2ServiceProviderConfigResponder = {
  with200(): KoaRuntimeResponse<t_getScimV2ServiceProviderConfigJson200Response>
} & KoaRuntimeResponder

export type GetScimV2ServiceProviderConfig = (
  params: Params<void, void, void>,
  respond: GetScimV2ServiceProviderConfigResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_getScimV2ServiceProviderConfigJson200Response>
>

export type GetScimV2ResourceTypesResponder = {
  with200(): KoaRuntimeResponse<t_getScimV2ResourceTypesJson200Response>
} & KoaRuntimeResponder

export type GetScimV2ResourceTypes = (
  params: Params<void, void, void>,
  respond: GetScimV2ResourceTypesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_getScimV2ResourceTypesJson200Response>
>

export type GetScimV2SchemasResponder = {
  with200(): KoaRuntimeResponse<t_getScimV2SchemasJson200Response>
} & KoaRuntimeResponder

export type GetScimV2Schemas = (
  params: Params<void, void, void>,
  respond: GetScimV2SchemasResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_getScimV2SchemasJson200Response>
>

export type Implementation = {
  getScimV2Users: GetScimV2Users
  postScimV2Users: PostScimV2Users
  getScimV2UsersId: GetScimV2UsersId
  putScimV2UsersId: PutScimV2UsersId
  patchScimV2UsersId: PatchScimV2UsersId
  deleteScimV2UsersId: DeleteScimV2UsersId
  getScimV2Groups: GetScimV2Groups
  postScimV2Groups: PostScimV2Groups
  getScimV2GroupsId: GetScimV2GroupsId
  putScimV2GroupsId: PutScimV2GroupsId
  patchScimV2GroupsId: PatchScimV2GroupsId
  deleteScimV2GroupsId: DeleteScimV2GroupsId
  getScimV2ServiceProviderConfig: GetScimV2ServiceProviderConfig
  getScimV2ResourceTypes: GetScimV2ResourceTypes
  getScimV2Schemas: GetScimV2Schemas
}

export function createRouter(implementation: Implementation): KoaRouter {
  const router = new KoaRouter()

  const getScimV2UsersQuerySchema = z.object({
    filter: z.string().optional(),
    count: z.coerce.number().optional(),
    startIndex: z.coerce.number().optional(),
  })

  const getScimV2UsersResponseValidator = responseValidationFactory(
    [["200", s_UserCollection]],
    undefined,
  )

  router.get("getScimV2Users", "/scim/v2/Users", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        getScimV2UsersQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_UserCollection>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .getScimV2Users(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getScimV2UsersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postScimV2UsersBodySchema = s_UserDefinition

  const postScimV2UsersResponseValidator = responseValidationFactory(
    [["201", s_User]],
    undefined,
  )

  router.post("postScimV2Users", "/scim/v2/Users", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        postScimV2UsersBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with201() {
        return new KoaRuntimeResponse<t_User>(201)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .postScimV2Users(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = postScimV2UsersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getScimV2UsersIdParamSchema = z.object({id: z.string()})

  const getScimV2UsersIdResponseValidator = responseValidationFactory(
    [
      ["200", s_User],
      ["404", z.undefined()],
    ],
    undefined,
  )

  router.get("getScimV2UsersId", "/scim/v2/Users/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        getScimV2UsersIdParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_User>(200)
      },
      with404() {
        return new KoaRuntimeResponse<void>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .getScimV2UsersId(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getScimV2UsersIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const putScimV2UsersIdParamSchema = z.object({id: z.string()})

  const putScimV2UsersIdBodySchema = s_User

  const putScimV2UsersIdResponseValidator = responseValidationFactory(
    [
      ["200", s_User],
      ["404", z.undefined()],
    ],
    undefined,
  )

  router.put("putScimV2UsersId", "/scim/v2/Users/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        putScimV2UsersIdParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        putScimV2UsersIdBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_User>(200)
      },
      with404() {
        return new KoaRuntimeResponse<void>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .putScimV2UsersId(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = putScimV2UsersIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const patchScimV2UsersIdParamSchema = z.object({id: z.string()})

  const patchScimV2UsersIdBodySchema = s_UserPatchOp

  const patchScimV2UsersIdResponseValidator = responseValidationFactory(
    [
      ["200", s_User],
      ["404", z.undefined()],
    ],
    undefined,
  )

  router.patch(
    "patchScimV2UsersId",
    "/scim/v2/Users/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          patchScimV2UsersIdParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          patchScimV2UsersIdBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_User>(200)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .patchScimV2UsersId(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const {status, body} =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = patchScimV2UsersIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteScimV2UsersIdParamSchema = z.object({id: z.string()})

  const deleteScimV2UsersIdResponseValidator = responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", z.undefined()],
    ],
    undefined,
  )

  router.delete(
    "deleteScimV2UsersId",
    "/scim/v2/Users/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteScimV2UsersIdParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .deleteScimV2UsersId(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const {status, body} =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = deleteScimV2UsersIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getScimV2GroupsQuerySchema = z.object({
    filter: z.string().optional(),
    count: z.coerce.number().optional(),
    startIndex: z.coerce.number().optional(),
  })

  const getScimV2GroupsResponseValidator = responseValidationFactory(
    [["200", s_GroupCollection]],
    undefined,
  )

  router.get("getScimV2Groups", "/scim/v2/Groups", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        getScimV2GroupsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_GroupCollection>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .getScimV2Groups(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getScimV2GroupsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postScimV2GroupsBodySchema = s_GroupDefinition

  const postScimV2GroupsResponseValidator = responseValidationFactory(
    [["201", s_Group]],
    undefined,
  )

  router.post("postScimV2Groups", "/scim/v2/Groups", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        postScimV2GroupsBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with201() {
        return new KoaRuntimeResponse<t_Group>(201)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .postScimV2Groups(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = postScimV2GroupsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getScimV2GroupsIdParamSchema = z.object({id: z.string()})

  const getScimV2GroupsIdResponseValidator = responseValidationFactory(
    [
      ["200", s_Group],
      ["404", z.undefined()],
    ],
    undefined,
  )

  router.get("getScimV2GroupsId", "/scim/v2/Groups/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        getScimV2GroupsIdParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_Group>(200)
      },
      with404() {
        return new KoaRuntimeResponse<void>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .getScimV2GroupsId(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getScimV2GroupsIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const putScimV2GroupsIdParamSchema = z.object({id: z.string()})

  const putScimV2GroupsIdBodySchema = s_Group

  const putScimV2GroupsIdResponseValidator = responseValidationFactory(
    [
      ["200", s_Group],
      ["404", z.undefined()],
    ],
    undefined,
  )

  router.put("putScimV2GroupsId", "/scim/v2/Groups/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        putScimV2GroupsIdParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        putScimV2GroupsIdBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_Group>(200)
      },
      with404() {
        return new KoaRuntimeResponse<void>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .putScimV2GroupsId(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = putScimV2GroupsIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const patchScimV2GroupsIdParamSchema = z.object({id: z.string()})

  const patchScimV2GroupsIdBodySchema = s_GroupPatchOp

  const patchScimV2GroupsIdResponseValidator = responseValidationFactory(
    [
      ["200", s_Group],
      ["404", z.undefined()],
    ],
    undefined,
  )

  router.patch(
    "patchScimV2GroupsId",
    "/scim/v2/Groups/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          patchScimV2GroupsIdParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          patchScimV2GroupsIdBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_Group>(200)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .patchScimV2GroupsId(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const {status, body} =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = patchScimV2GroupsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteScimV2GroupsIdParamSchema = z.object({id: z.string()})

  const deleteScimV2GroupsIdResponseValidator = responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", z.undefined()],
    ],
    undefined,
  )

  router.delete(
    "deleteScimV2GroupsId",
    "/scim/v2/Groups/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteScimV2GroupsIdParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .deleteScimV2GroupsId(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const {status, body} =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = deleteScimV2GroupsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getScimV2ServiceProviderConfigResponseValidator =
    responseValidationFactory(
      [["200", s_getScimV2ServiceProviderConfigJson200Response]],
      undefined,
    )

  router.get(
    "getScimV2ServiceProviderConfig",
    "/scim/v2/ServiceProviderConfig",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_getScimV2ServiceProviderConfigJson200Response>(
            200,
          )
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .getScimV2ServiceProviderConfig(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const {status, body} =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = getScimV2ServiceProviderConfigResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getScimV2ResourceTypesResponseValidator = responseValidationFactory(
    [["200", s_getScimV2ResourceTypesJson200Response]],
    undefined,
  )

  router.get(
    "getScimV2ResourceTypes",
    "/scim/v2/ResourceTypes",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_getScimV2ResourceTypesJson200Response>(
            200,
          )
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .getScimV2ResourceTypes(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const {status, body} =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = getScimV2ResourceTypesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getScimV2SchemasResponseValidator = responseValidationFactory(
    [["200", s_getScimV2SchemasJson200Response]],
    undefined,
  )

  router.get("getScimV2Schemas", "/scim/v2/Schemas", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_getScimV2SchemasJson200Response>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .getScimV2Schemas(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getScimV2SchemasResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  return router
}
