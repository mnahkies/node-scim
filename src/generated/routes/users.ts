/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import KoaRouter, {RouterContext} from "@koa/router"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  Response,
  StatusCode,
} from "@nahkies/typescript-koa-runtime/server"
import {
  Params,
  parseRequestInput,
  responseValidationFactory,
} from "@nahkies/typescript-koa-runtime/zod"
import {z} from "zod"
import {
  t_DeleteScimV2UsersIdParamSchema,
  t_GetScimV2UsersIdParamSchema,
  t_GetScimV2UsersQuerySchema,
  t_PatchScimV2UsersIdBodySchema,
  t_PatchScimV2UsersIdParamSchema,
  t_PostScimV2UsersBodySchema,
  t_PutScimV2UsersIdBodySchema,
  t_PutScimV2UsersIdParamSchema,
  t_ScimException,
  t_User,
  t_UsersListing,
} from "../models"
import {
  s_CreateUser,
  s_Patch,
  s_ScimException,
  s_User,
  s_UsersListing,
} from "../schemas"

export type GetScimV2UsersResponder = {
  with200(): KoaRuntimeResponse<t_UsersListing>
} & KoaRuntimeResponder

export type GetScimV2Users = (
  params: Params<void, t_GetScimV2UsersQuerySchema, void, void>,
  respond: GetScimV2UsersResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_UsersListing>>

export type PostScimV2UsersResponder = {
  with201(): KoaRuntimeResponse<t_User>
} & KoaRuntimeResponder

export type PostScimV2Users = (
  params: Params<void, void, t_PostScimV2UsersBodySchema, void>,
  respond: PostScimV2UsersResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_User>>

export type GetScimV2UsersIdResponder = {
  with200(): KoaRuntimeResponse<t_User>
  with404(): KoaRuntimeResponse<t_ScimException>
} & KoaRuntimeResponder

export type GetScimV2UsersId = (
  params: Params<t_GetScimV2UsersIdParamSchema, void, void, void>,
  respond: GetScimV2UsersIdResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_User>
  | Response<404, t_ScimException>
>

export type PutScimV2UsersIdResponder = {
  with200(): KoaRuntimeResponse<t_User>
  with404(): KoaRuntimeResponse<t_ScimException>
} & KoaRuntimeResponder

export type PutScimV2UsersId = (
  params: Params<
    t_PutScimV2UsersIdParamSchema,
    void,
    t_PutScimV2UsersIdBodySchema,
    void
  >,
  respond: PutScimV2UsersIdResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_User>
  | Response<404, t_ScimException>
>

export type PatchScimV2UsersIdResponder = {
  with200(): KoaRuntimeResponse<t_User>
  with404(): KoaRuntimeResponse<t_ScimException>
} & KoaRuntimeResponder

export type PatchScimV2UsersId = (
  params: Params<
    t_PatchScimV2UsersIdParamSchema,
    void,
    t_PatchScimV2UsersIdBodySchema,
    void
  >,
  respond: PatchScimV2UsersIdResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_User>
  | Response<404, t_ScimException>
>

export type DeleteScimV2UsersIdResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_ScimException>
} & KoaRuntimeResponder

export type DeleteScimV2UsersId = (
  params: Params<t_DeleteScimV2UsersIdParamSchema, void, void, void>,
  respond: DeleteScimV2UsersIdResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_ScimException>
>

export abstract class UsersImplementation {
  abstract getScimV2Users: GetScimV2Users
  abstract postScimV2Users: PostScimV2Users
  abstract getScimV2UsersId: GetScimV2UsersId
  abstract putScimV2UsersId: PutScimV2UsersId
  abstract patchScimV2UsersId: PatchScimV2UsersId
  abstract deleteScimV2UsersId: DeleteScimV2UsersId
}

export function createUsersRouter(
  implementation: UsersImplementation,
): KoaRouter {
  const router = new KoaRouter()

  const getScimV2UsersQuerySchema = z.object({
    filter: z.string().optional(),
    count: z.coerce.number().optional(),
    startIndex: z.coerce.number().optional(),
  })

  const getScimV2UsersResponseValidator = responseValidationFactory(
    [["200", s_UsersListing]],
    undefined,
  )

  router.get("getScimV2Users", "/scim/v2/Users", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        getScimV2UsersQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_UsersListing>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .getScimV2Users(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getScimV2UsersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postScimV2UsersBodySchema = s_CreateUser

  const postScimV2UsersResponseValidator = responseValidationFactory(
    [["201", s_User]],
    undefined,
  )

  router.post("postScimV2Users", "/scim/v2/Users", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        postScimV2UsersBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const responder = {
      with201() {
        return new KoaRuntimeResponse<t_User>(201)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .postScimV2Users(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = postScimV2UsersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getScimV2UsersIdParamSchema = z.object({id: z.string()})

  const getScimV2UsersIdResponseValidator = responseValidationFactory(
    [
      ["200", s_User],
      ["404", s_ScimException],
    ],
    undefined,
  )

  router.get("getScimV2UsersId", "/scim/v2/Users/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        getScimV2UsersIdParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_User>(200)
      },
      with404() {
        return new KoaRuntimeResponse<t_ScimException>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .getScimV2UsersId(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getScimV2UsersIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const putScimV2UsersIdParamSchema = z.object({id: z.string()})

  const putScimV2UsersIdBodySchema = s_CreateUser

  const putScimV2UsersIdResponseValidator = responseValidationFactory(
    [
      ["200", s_User],
      ["404", s_ScimException],
    ],
    undefined,
  )

  router.put("putScimV2UsersId", "/scim/v2/Users/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        putScimV2UsersIdParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        putScimV2UsersIdBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_User>(200)
      },
      with404() {
        return new KoaRuntimeResponse<t_ScimException>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .putScimV2UsersId(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = putScimV2UsersIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const patchScimV2UsersIdParamSchema = z.object({id: z.string()})

  const patchScimV2UsersIdBodySchema = s_Patch

  const patchScimV2UsersIdResponseValidator = responseValidationFactory(
    [
      ["200", s_User],
      ["404", s_ScimException],
    ],
    undefined,
  )

  router.patch(
    "patchScimV2UsersId",
    "/scim/v2/Users/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          patchScimV2UsersIdParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          patchScimV2UsersIdBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_User>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_ScimException>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .patchScimV2UsersId(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const {status, body} =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = patchScimV2UsersIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteScimV2UsersIdParamSchema = z.object({id: z.string()})

  const deleteScimV2UsersIdResponseValidator = responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", s_ScimException],
    ],
    undefined,
  )

  router.delete(
    "deleteScimV2UsersId",
    "/scim/v2/Users/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteScimV2UsersIdParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_ScimException>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .deleteScimV2UsersId(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const {status, body} =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = deleteScimV2UsersIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  return router
}

export {createUsersRouter as createRouter}
export {UsersImplementation as Implementation}
