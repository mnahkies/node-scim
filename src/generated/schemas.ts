/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {z} from "zod"

export const PermissiveBoolean = z.preprocess((value) => {
  if (typeof value === "string" && (value === "true" || value === "false")) {
    return value === "true"
  } else if (typeof value === "number" && (value === 1 || value === 0)) {
    return value === 1
  }
  return value
}, z.boolean())

export const s_GroupCollection = z.object({
  schemas: z.array(z.string()),
  totalResults: z.coerce.number(),
  startIndex: z.coerce.number(),
  itemsPerPage: z.coerce.number(),
  resources: z.array(z.any()),
})

export const s_GroupPatchOp = z.object({
  schemas: z.array(
    z.string().default("urn:ietf:params:scim:api:messages:2.0:PatchOp"),
  ),
  operations: z.array(
    z.object({
      op: z.string(),
      value: z.object({
        id: z.string().optional(),
        displayName: z.string().optional(),
      }),
    }),
  ),
})

export const s_GroupResourceMeta = z.object({
  resourceType: z.enum(["Group"]).optional(),
})

export const s_GroupResourceSchemas = z
  .array(z.enum(["urn:ietf:params:scim:schemas:core:2.0:Group"]))
  .default(["urn:ietf:params:scim:schemas:core:2.0:Group"])

export const s_ListResponse = z.object({
  schemas: z
    .array(z.enum(["urn:ietf:params:scim:api:messages:2.0:ListResponse"]))
    .optional()
    .default(["urn:ietf:params:scim:api:messages:2.0:ListResponse"]),
  totalResults: z.coerce.number(),
  itemsPerPage: z.coerce.number().optional().default(100),
  startIndex: z.coerce.number().optional().default(1),
})

export const s_ResourceType = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string(),
  endpoint: z.string().optional(),
  schema: z.string(),
  schemaExtensions: z.array(
    z.object({
      schema: z.string().optional(),
      required: PermissiveBoolean.optional().default(false),
    }),
  ),
})

export const s_ScimAttribute = z.object({
  name: z.string(),
  type: z.string(),
  multiValued: PermissiveBoolean,
  description: z.string(),
  required: PermissiveBoolean,
  caseExact: PermissiveBoolean.optional().default(false),
  mutability: z.string(),
  returned: z.string(),
  uniqueness: z.enum(["none", "server", "global"]).optional().default("none"),
})

export const s_ScimException = z.object({
  schemas: z
    .array(z.enum(["urn:ietf:params:scim:api:messages:2.0:Error"]))
    .optional()
    .default(["urn:ietf:params:scim:api:messages:2.0:Error"]),
  detail: z.string(),
  status: z.coerce.number(),
  metadata: z.record(z.any()).optional(),
})

export const s_ServiceProviderConfigAuthenticationScheme = z.object({
  type: z.enum([
    "oauth",
    "oauth2",
    "oauthbearertoken",
    "httpbasic",
    "httpdigest",
  ]),
  name: z.string(),
  description: z.string(),
  specUri: z.string().optional(),
  documentationUri: z.string().optional(),
  primary: PermissiveBoolean.optional().default(false),
})

export const s_UserEmail = z.object({
  primary: PermissiveBoolean.optional().default(false),
  type: z.string().optional(),
  value: z.string().email(),
  display: z.string().optional(),
})

export const s_UserFullName = z.object({
  formatted: z.string().optional(),
  familyName: z.string().optional(),
  givenName: z.string().optional(),
  middleName: z.string().optional(),
  honorificPrefix: z.string().optional(),
  honorificSuffix: z.string().optional(),
})

export const s_UserPatchOp = z.object({
  schemas: z
    .array(z.enum(["urn:ietf:params:scim:api:messages:2.0:PatchOp"]))
    .default(["urn:ietf:params:scim:api:messages:2.0:PatchOp"]),
  operations: z.array(
    z.object({
      op: z.string(),
      value: z.object({active: PermissiveBoolean}),
    }),
  ),
})

export const s_UserResourceMeta = z
  .object({resourceType: z.enum(["User"]).optional()})
  .default({resourceType: "User"})

export const s_UserResourceSchemas = z
  .array(z.enum(["urn:ietf:params:scim:schemas:core:2.0:User"]))
  .default(["urn:ietf:params:scim:schemas:core:2.0:User"])

export const s_CreateGroup = z.object({
  schemas: s_GroupResourceSchemas,
  externalId: z.string(),
  displayName: z.string(),
})

export const s_CreateUser = z.object({
  schemas: s_UserResourceSchemas,
  externalId: z.string().optional(),
  userName: z.string(),
  displayName: z.string().optional(),
  name: s_UserFullName.optional(),
  emails: z.array(s_UserEmail).default([]),
  active: PermissiveBoolean.default(true),
  groups: z.array(z.any()).default([]),
})

export const s_ResourceTypes = s_ListResponse.merge(
  z.object({Resources: z.array(s_ResourceType)}),
)

export const s_Schema = z.object({
  schemas: z
    .array(z.enum(["urn:ietf:params:scim:schemas:core:2.0:Schema"]))
    .optional()
    .default(["urn:ietf:params:scim:schemas:core:2.0:Schema"]),
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  attributes: z.array(s_ScimAttribute).optional(),
  meta: z
    .object({
      resourceType: z.string().optional(),
      location: z.string().optional(),
    })
    .optional(),
})

export const s_ServiceProviderConfig = z.object({
  schemas: z
    .array(
      z.enum(["urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig"]),
    )
    .optional()
    .default(["urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig"]),
  documentationUri: z.string().optional(),
  patch: z.object({supported: PermissiveBoolean.optional().default(false)}),
  bulk: z.object({
    supported: PermissiveBoolean.optional().default(false),
    maxOperations: z.coerce.number().optional(),
    maxPayloadSize: z.coerce.number().optional(),
  }),
  filter: z.object({
    supported: PermissiveBoolean.optional().default(false),
    maxResults: z.coerce.number().optional(),
  }),
  changePassword: z.object({
    supported: PermissiveBoolean.optional().default(false),
  }),
  sort: z.object({supported: PermissiveBoolean.optional().default(false)}),
  etag: z.object({supported: PermissiveBoolean.optional().default(false)}),
  pagination: z
    .object({
      cursor: PermissiveBoolean.optional().default(false),
      index: PermissiveBoolean.optional().default(false),
      defaultPaginationMethod: z.enum(["index", "cursor"]).optional(),
      defaultPageSize: z.coerce.number().optional().default(10),
      maxPageSize: z.coerce.number().optional().default(100),
      cursorTimeout: z.coerce.number().optional().default(3600),
    })
    .optional(),
  authenticationSchemes: z.array(s_ServiceProviderConfigAuthenticationScheme),
  meta: z
    .object({
      location: z.string().optional(),
      resourceType: z
        .enum(["ServiceProviderConfig"])
        .optional()
        .default("ServiceProviderConfig"),
      created: z.string().datetime({offset: true}).optional(),
      lastModified: z.string().datetime({offset: true}).optional(),
      version: z.string().optional(),
    })
    .optional(),
})

export const s_Group = s_CreateGroup.merge(
  z.object({
    id: z.string(),
    members: z.array(z.any()).optional().default([]),
    meta: s_GroupResourceMeta.optional(),
  }),
)

export const s_Schemas = s_ListResponse.merge(
  z.object({Resources: z.array(s_Schema)}),
)

export const s_User = s_CreateUser.merge(
  z.object({id: z.string().optional(), meta: s_UserResourceMeta}),
)

export const s_UserCollection = z.object({
  schemas: s_UserResourceSchemas,
  totalResults: z.coerce.number(),
  startIndex: z.coerce.number(),
  itemsPerPage: z.coerce.number(),
  resources: z.array(s_User),
})
