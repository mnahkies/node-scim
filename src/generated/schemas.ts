/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {z} from "zod"

export const PermissiveBoolean = z.preprocess((value) => {
  if (typeof value === "string" && (value === "true" || value === "false")) {
    return value === "true"
  } else if (typeof value === "number" && (value === 1 || value === 0)) {
    return value === 1
  }
  return value
}, z.boolean())

export const s_Group = z.object({
  schemas: z.array(z.string()),
  id: z.string(),
  displayName: z.string(),
  members: z.array(z.any()).optional(),
  meta: z.object({}),
})

export const s_GroupCollection = z.object({
  schemas: z.array(z.string()),
  totalResults: z.coerce.number(),
  startIndex: z.coerce.number(),
  itemsPerPage: z.coerce.number(),
  resources: z.array(z.any()),
})

export const s_GroupMembers = z.object({
  display: z.string().optional(),
  value: z.string(),
})

export const s_GroupPatchOp = z.object({
  schemas: z.array(z.string()),
  operations: z.array(
    z.object({
      op: z.string(),
      value: z.object({
        id: z.string().optional(),
        displayName: z.string().optional(),
      }),
    }),
  ),
})

export const s_UserEmail = z.object({
  primary: PermissiveBoolean,
  type: z.string(),
  value: z.string().email(),
  display: z.string().optional(),
})

export const s_UserFullName = z.object({
  formatted: z.string().optional(),
  familyName: z.string().optional(),
  givenName: z.string().optional(),
  middleName: z.string().optional(),
  honorificPrefix: z.string().optional(),
  honorificSuffix: z.string().optional(),
})

export const s_UserPatchOp = z.object({
  schemas: z.array(z.string()),
  operations: z.array(
    z.object({
      op: z.string(),
      value: z.object({active: PermissiveBoolean}),
    }),
  ),
})

export const s_UserResourceMeta = z.object({
  resourceType: z.enum(["User"]).optional(),
})

export const s_UserResourceSchemas = z.array(
  z.enum(["urn:ietf:params:scim:schemas:core:2.0:User"]),
)

export const s_CreateUser = z.object({
  schemas: s_UserResourceSchemas,
  externalId: z.string().optional(),
  userName: z.string(),
  displayName: z.string().optional(),
  name: s_UserFullName,
  emails: z.array(s_UserEmail),
  active: PermissiveBoolean,
  groups: z.array(z.any()),
  meta: s_UserResourceMeta,
})

export const s_GroupDefinition = z.object({
  displayName: z.string(),
  members: z.array(s_GroupMembers).optional(),
})

export const s_User = s_CreateUser.merge(z.object({id: z.string()}))

export const s_UserCollection = z.object({
  schemas: z.array(z.string()),
  totalResults: z.coerce.number(),
  startIndex: z.coerce.number(),
  itemsPerPage: z.coerce.number(),
  resources: z.array(s_User),
})

export const s_getScimV2ServiceProviderConfigJson200Response = z.object({})

export const s_getScimV2ResourceTypesJson200Response = z.object({})

export const s_getScimV2SchemasJson200Response = z.object({})
