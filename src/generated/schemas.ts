/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {z} from "zod"

export const PermissiveBoolean = z.preprocess((value) => {
  if (typeof value === "string" && (value === "true" || value === "false")) {
    return value === "true"
  } else if (typeof value === "number" && (value === 1 || value === 0)) {
    return value === 1
  }
  return value
}, z.boolean())

export const s_EnterpriseUser = z.object({
  employeeNumber: z.string(),
  costCenter: z.string(),
})

export const s_Group = z.object({
  schemas: z.array(z.string()),
  id: z.string(),
  displayName: z.string(),
  members: z.array(z.any()).optional(),
  meta: z.object({}),
})

export const s_GroupCollection = z.object({
  schemas: z.array(z.string()),
  totalResults: z.coerce.number(),
  startIndex: z.coerce.number(),
  itemsPerPage: z.coerce.number(),
  resources: z.array(z.any()),
})

export const s_GroupMembers = z.object({
  display: z.string().optional(),
  value: z.string(),
})

export const s_GroupPatchOp = z.object({
  schemas: z.array(z.string()),
  operations: z.array(
    z.object({
      op: z.string(),
      value: z.object({
        id: z.string().optional(),
        displayName: z.string().optional(),
      }),
    }),
  ),
})

export const s_OktapriseUser = z.object({
  badge: z.string(),
  machine: z.string(),
})

export const s_User = z.object({
  schemas: z.array(z.string()),
  id: z.string(),
  active: PermissiveBoolean,
  userName: z.string(),
  name: z.object({}),
  emails: z.array(z.any()),
  "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": z.object({}),
  "urn:ietf:params:scim:schemas:extension:oktaprise:2.0:User": z.object({}),
  meta: z.object({}),
  groups: z.array(z.any()),
})

export const s_UserCollection = z.object({
  schemas: z.array(z.string()),
  totalResults: z.coerce.number(),
  startIndex: z.coerce.number(),
  itemsPerPage: z.coerce.number(),
  resources: z.array(z.any()),
})

export const s_UserFullName = z.object({
  familyName: z.string(),
  givenName: z.string(),
  middleName: z.string().optional(),
})

export const s_UserPatchOp = z.object({
  schemas: z.array(z.string()),
  operations: z.array(
    z.object({
      op: z.string(),
      value: z.object({active: PermissiveBoolean}),
    }),
  ),
})

export const s_GroupDefinition = z.object({
  displayName: z.string(),
  members: z.array(s_GroupMembers).optional(),
})

export const s_UserDefinition = z.object({
  active: PermissiveBoolean.optional(),
  name: s_UserFullName.optional(),
  "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User":
    s_EnterpriseUser,
  "urn:ietf:params:scim:schemas:extension:oktaprise:2.0:User": s_OktapriseUser,
})

export const s_getScimV2ServiceProviderConfigJson200Response = z.object({})

export const s_getScimV2ResourceTypesJson200Response = z.object({})

export const s_getScimV2SchemasJson200Response = z.object({})
