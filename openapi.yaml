openapi: 3.0.0
info:
  title: node-scim
  description: |
    scim client compatible with scim v2, as defined by:
    - https://datatracker.ietf.org/doc/html/rfc7643
    - https://datatracker.ietf.org/doc/html/rfc7644
  version: "0.0.1"
tags:
  - name: users
  - name: groups
  - name: introspection
paths:
  /scim/v2/Users:
    get:
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/startIndex"
      responses:
        200:
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersListing"
    post:
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        201:
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /scim/v2/Users/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
    get:
      tags:
        - users
      responses:
        200:
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: User replaced.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Patch"
      responses:
        200:
          description: User replaced.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - users
      responses:
        204:
          description: No Content (successful deletion)
        404:
          $ref: "#/components/responses/NotFound"
  /scim/v2/Groups:
    get:
      tags:
        - groups
      parameters:
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/excludedAttributes"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/startIndex"
      responses:
        200:
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupsListing"
    post:
      tags:
        - groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroup"
      responses:
        201:
          description: The group has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
  /scim/v2/Groups/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      - $ref: "#/components/parameters/excludedAttributes"
    get:
      tags:
        - groups
      responses:
        200:
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        200:
          description: Group replaced.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      tags:
        - groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Patch"
      responses:
        200:
          description: Group replaced.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - groups
      responses:
        204:
          description: No Content (successful deletion)
        404:
          $ref: "#/components/responses/NotFound"
  /scim/v2/ServiceProviderConfig:
    get:
      tags:
        - introspection
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceProviderConfig"
  /scim/v2/ResourceTypes:
    get:
      tags:
        - introspection
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceTypes"
  /scim/v2/Schemas:
    get:
      tags:
        - introspection
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref:
                  "#/components/schemas/Schemas"
components:
  parameters:
    filter:
      name: filter
      description: >-
        Filter search for userName, and status. i.e.:
        `/Users?filter=userName eq j@doe.com`
      in: query
      schema:
        type: string
    count:
      name: count
      description: Number of results per search
      in: query
      schema:
        type: integer
    startIndex:
      name: startIndex
      description: Index of the result
      in: query
      schema:
        description: Index of the result
        type: integer
    excludedAttributes:
      name: excludedAttributes
      description: |
        A multi-valued list of strings indicating the
        names of resource attributes to be removed from the default set of
        attributes to return.  This parameter SHALL have no effect on
        attributes whose schema "returned" setting is "always" (see
        Sections 2.2 and 7 of [RFC7643]).  Attribute names MUST be in
        standard attribute notation (Section 3.10) form.  See Section 3.9
        for additional retrieval query parameters.
      in: query
      schema:
        type: string
  responses:
    NotFound:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ScimException"
  schemas:
    # Groups
    GroupsListing:
      allOf:
        - $ref: "#/components/schemas/ListResponse"
        - type: object
          required:
            - Resources
          properties:
            Resources:
              type: array
              items:
                $ref: "#/components/schemas/Group"

    CreateGroup:
      required:
        - schemas
        - displayName
      properties:
        schemas:
          $ref: "#/components/schemas/GroupResourceSchemas"
        externalId:
          type: string
        displayName:
          type: string
    Group:
      allOf:
        - $ref: "#/components/schemas/CreateGroup"
        - type: object
          required:
            - id
          properties:
            id:
              description: GUID
              type: string
            members:
              description: The list of groups
              type: array
              items:
                type: object
                additionalProperties: true
            meta:
              allOf:
                - $ref: "#/components/schemas/BaseMeta"
                - type: object
                  properties:
                    resourceType:
                      type: string
                      enum:
                        - ServiceProviderConfig
                      default: ServiceProviderConfig
    GroupResourceSchemas:
      type: array
      items:
        type: string
        enum:
          - "urn:ietf:params:scim:schemas:core:2.0:Group"
      default: [ "urn:ietf:params:scim:schemas:core:2.0:Group" ]
    GroupResourceMeta:
      properties:
        resourceType:
          type: string
          enum:
            - Group
      default: { resourceType: "Group" }
    # Users
    UsersListing:
      allOf:
        - $ref: "#/components/schemas/ListResponse"
        - type: object
          required:
            - Resources
          properties:
            Resources:
              type: array
              items:
                $ref: "#/components/schemas/User"
    CreateUser:
      type: object
      required:
        - schemas
        - userName
        - emails
        - active
        - groups
      properties:
        schemas:
          $ref: "#/components/schemas/UserResourceSchemas"
        externalId:
          type: string
        userName:
          description: Username, typically their email address
          type: string
        displayName:
          type: string
        name:
          $ref: "#/components/schemas/UserFullName"
        emails:
          description: The list of emails
          type: array
          items:
            $ref: "#/components/schemas/UserEmail"
          default: [ ]
        active:
          type: boolean
          default: true
        groups:
          description: List of user groups
          type: array
          items: { }
          default: [ ]
    User:
      allOf:
        - $ref: "#/components/schemas/CreateUser"
        - type: object
          required:
            - meta
          properties:
            id:
              type: string
            meta:
              $ref: "#/components/schemas/UserResourceMeta"
    UserFullName:
      description: The full name of the user
      type: object
      properties:
        formatted:
          type: string
        familyName:
          type: string
        givenName:
          type: string
        middleName:
          type: string
        honorificPrefix:
          type: string
        honorificSuffix:
          type: string
    UserEmail:
      description: The user email
      type: object
      required:
        - value
      properties:
        primary:
          type: boolean
          default: false
        type:
          type: string
        value:
          type: string
          format: email
        display:
          type: string

    UserResourceSchemas:
      type: array
      items:
        type: string
        enum:
          - "urn:ietf:params:scim:schemas:core:2.0:User"
      default: [ "urn:ietf:params:scim:schemas:core:2.0:User" ]
    UserResourceMeta:
      type: object
      properties:
        resourceType:
          type: string
          enum:
            - "User"
      default: { resourceType: "User" }

    # Introspection
    BaseMeta:
      type: object
      properties:
        location:
          type: string
          format: uri
          example: https://example.com/scim/v2/ServiceProviderConfig
        created:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time
        version:
          type: string
    ServiceProviderConfig:
      type: object
      required:
        - patch
        - bulk
        - filter
        - changePassword
        - sort
        - etag
        - authenticationSchemes
      properties:
        schemas:
          type: array
          items:
            type: string
            enum:
              - "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig"
          default: [ "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig" ]
        documentationUri:
          type: string
          format: uri
        patch:
          type: object
          properties:
            supported:
              type: boolean
              default: false
        bulk:
          type: object
          properties:
            supported:
              type: boolean
              default: false
            maxOperations:
              type: integer
            maxPayloadSize:
              type: integer
        filter:
          type: object
          properties:
            supported:
              type: boolean
              default: false
            maxResults:
              type: integer
        changePassword:
          type: object
          properties:
            supported:
              type: boolean
              default: false
        sort:
          type: object
          properties:
            supported:
              type: boolean
              default: false
        etag:
          type: object
          properties:
            supported:
              type: boolean
              default: false
        pagination:
          type: object
          properties:
            cursor:
              type: boolean
              default: false
            index:
              type: boolean
              default: false
            defaultPaginationMethod:
              type: string
              enum:
                - index
                - cursor
            defaultPageSize:
              type: number
              default: 10
            maxPageSize:
              type: number
              default: 100
            cursorTimeout:
              type: number
              default: 3600
        authenticationSchemes:
          type: array
          items:
            $ref: "#/components/schemas/ServiceProviderConfigAuthenticationScheme"
        meta:
          allOf:
            - $ref: "#/components/schemas/BaseMeta"
            - type: object
              properties:
                resourceType:
                  type: string
                  enum:
                    - ServiceProviderConfig
                  default: ServiceProviderConfig
    ServiceProviderConfigAuthenticationScheme:
      type: object
      required:
        - type
        - name
        - description
      properties:
        type:
          type: string
          enum:
            - oauth
            - oauth2
            - oauthbearertoken
            - httpbasic
            - httpdigest
          example: oauthbearertoken
        name:
          type: string
          example: OAuth Bearer Token
        description:
          type: string
          example: Authentication scheme using the OAuth Bearer Token Standard
        specUri:
          type: string
          format: uri
          example: http://www.rfc-editor.org/info/rfc6750
        documentationUri:
          type: string
          format: uri
          example: http://example.com/help/oauth.html
        primary:
          type: boolean
          default: false

    ListResponse:
      type: object
      required:
        - totalResults
      properties:
        schemas:
          type: array
          items:
            type: string
            enum:
              - "urn:ietf:params:scim:api:messages:2.0:ListResponse"
          default: [ "urn:ietf:params:scim:api:messages:2.0:ListResponse" ]
        totalResults:
          type: number
          example: 1
        itemsPerPage:
          type: number
          example: 100
          default: 100
        startIndex:
          type: number
          example: 1
          default: 1

    ResourceTypes:
      allOf:
        - $ref: "#/components/schemas/ListResponse"
        - type: object
          required:
            - Resources
          properties:
            Resources:
              type: array
              items:
                $ref: "#/components/schemas/ResourceType"
    ResourceType:
      type: object
      properties:
        id:
          type: string
          description: "The unique identifier for the SCIM schema."
        name:
          type: string
          description: "The name of the SCIM schema."
        description:
          type: string
          description: "A description of the SCIM schema."
        endpoint:
          type: string
          description: |
            The resource type's HTTP-addressable endpoint relative to the Base URL of the service provider, e.g., "Users".  REQUIRED.
          example: Users
        schema:
          type: string
          description: "The URI of the SCIM schema."
          example: "urn:ietf:params:scim:schemas:core:2.0:User"
        schemaExtensions:
          type: array
          description: "An array of URIs representing schema extensions."
          items:
            type: object
            properties:
              schema:
                type: string
                description: "A URI for a schema extension."
                example: "urn:edu:2.0:Staff"
              required:
                type: boolean
                default: false
      required:
        - name
        - description
        - schema
        - schemaExtensions

    Schemas:
      allOf:
        - $ref: "#/components/schemas/ListResponse"
        - type: object
          required:
            - Resources
          properties:
            Resources:
              type: array
              items:
                $ref: "#/components/schemas/Schema"
    Schema:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
            enum:
              - "urn:ietf:params:scim:schemas:core:2.0:Schema"
          default: [ "urn:ietf:params:scim:schemas:core:2.0:Schema" ]
        id:
          type: string
          example: "urn:ietf:params:scim:schemas:oktaprise:2.0:Users"
        name:
          type: string
          example: OktapriseUsers
        description:
          type: string
          example: Oktaprise parameters.
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/ScimAttribute"
        meta:
          type: object
          properties:
            resourceType:
              type: string
              example: Schema
            location:
              type: string
              example: /scim/v2/Schemas/urn:ietf:params:scim:schemas:oktaprise:2.0:Users
    ScimAttribute:
      type: object
      properties:
        name:
          type: string
          description: "The name of the SCIM attribute."
        type:
          type: string
          description: "The data type of the SCIM attribute."
        multiValued:
          type: boolean
          description: "Indicates whether the SCIM attribute can have multiple values."
        description:
          type: string
          description: "A description of the SCIM attribute."
        required:
          type: boolean
          description: "Indicates if the SCIM attribute is required."
        caseExact:
          type: boolean
          description: "Indicates whether the attribute is case sensitive."
          default: false
        mutability:
          type: string
          description: "Indicates how the attribute can be modified (`readOnly`, `readWrite`, etc.)."
        returned:
          type: string
          description: "Defines when the attribute is returned (`always`, `never`, etc.)."
        uniqueness:
          type: string
          description: "Specifies the uniqueness of the attribute (`none`, `server`, `global`)."
          enum:
            - none
            - server
            - global
          default: none
      required:
        - name
        - type
        - multiValued
        - description
        - required
        - mutability
        - returned

    # Common
    Patch:
      type: object
      required:
        - schemas
        - operations
      properties:
        schemas:
          description: The list of schemas
          type: array
          items:
            type: string
            enum:
              - "urn:ietf:params:scim:api:messages:2.0:PatchOp"
          default: [ "urn:ietf:params:scim:api:messages:2.0:PatchOp" ]
        Operations:
          description: Patch operation details
          type: array
          items:
            type: object
            required:
              - op
              - value
            properties:
              op:
                type: string
                enum:
                  - add
                  - remove
                  - replace
              path:
                type: string
              value:
                additionalProperties: true

    ScimException:
      description: SCIM Exception
      type: object
      required:
        - schemas
        - detail
        - status
      properties:
        schemas:
          description: The list of schemas
          type: array
          items:
            enum:
              - "urn:ietf:params:scim:api:messages:2.0:Error"
            type: string
          default: [ "urn:ietf:params:scim:api:messages:2.0:Error" ]
        detail:
          type: string
        status:
          type: number
        metadata:
          type: object
          additionalProperties: true

    ListResponseSchemas:
      type: array
      items:
        type: string
        enum:
          - "urn:ietf:params:scim:api:messages:2.0:ListResponse"
      default: [ "urn:ietf:params:scim:api:messages:2.0:ListResponse" ]
