// @generated by Peggy 5.0.3.
//
// https://peggyjs.org/

"use strict"

class peg$SyntaxError extends SyntaxError {
  constructor(message, expected, found, location) {
    super(message)
    this.expected = expected
    this.found = found
    this.location = location
    this.name = "SyntaxError"
  }

  format(sources) {
    let str = "Error: " + this.message
    if (this.location) {
      let src = null
      const st = sources.find((s) => s.source === this.location.source)
      if (st) {
        src = st.text.split(/\r\n|\n|\r/g)
      }
      const s = this.location.start
      const offset_s =
        this.location.source &&
        typeof this.location.source.offset === "function"
          ? this.location.source.offset(s)
          : s
      const loc =
        this.location.source + ":" + offset_s.line + ":" + offset_s.column
      if (src) {
        const e = this.location.end
        const filler = "".padEnd(offset_s.line.toString().length, " ")
        const line = src[s.line - 1]
        const last = s.line === e.line ? e.column : line.length + 1
        const hatLen = last - s.column || 1
        str +=
          "\n --> " +
          loc +
          "\n" +
          filler +
          " |\n" +
          offset_s.line +
          " | " +
          line +
          "\n" +
          filler +
          " | " +
          "".padEnd(s.column - 1, " ") +
          "".padEnd(hatLen, "^")
      } else {
        str += "\n at " + loc
      }
    }
    return str
  }

  static buildMessage(expected, found) {
    function hex(ch) {
      return ch.codePointAt(0).toString(16).toUpperCase()
    }

    const nonPrintable = Object.prototype.hasOwnProperty.call(
      RegExp.prototype,
      "unicode",
    )
      ? new RegExp("[\\p{C}\\p{Mn}\\p{Mc}]", "gu")
      : null
    function unicodeEscape(s) {
      if (nonPrintable) {
        return s.replace(nonPrintable, (ch) => "\\u{" + hex(ch) + "}")
      }
      return s
    }

    function literalEscape(s) {
      return unicodeEscape(
        s
          .replace(/\\/g, "\\\\")
          .replace(/"/g, '\\"')
          .replace(/\0/g, "\\0")
          .replace(/\t/g, "\\t")
          .replace(/\n/g, "\\n")
          .replace(/\r/g, "\\r")
          .replace(/[\x00-\x0F]/g, (ch) => "\\x0" + hex(ch))
          .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x" + hex(ch)),
      )
    }

    function classEscape(s) {
      return unicodeEscape(
        s
          .replace(/\\/g, "\\\\")
          .replace(/\]/g, "\\]")
          .replace(/\^/g, "\\^")
          .replace(/-/g, "\\-")
          .replace(/\0/g, "\\0")
          .replace(/\t/g, "\\t")
          .replace(/\n/g, "\\n")
          .replace(/\r/g, "\\r")
          .replace(/[\x00-\x0F]/g, (ch) => "\\x0" + hex(ch))
          .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x" + hex(ch)),
      )
    }

    const DESCRIBE_EXPECTATION_FNS = {
      literal(expectation) {
        return '"' + literalEscape(expectation.text) + '"'
      },

      class(expectation) {
        const escapedParts = expectation.parts.map((part) =>
          Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part),
        )

        return (
          "[" +
          (expectation.inverted ? "^" : "") +
          escapedParts.join("") +
          "]" +
          (expectation.unicode ? "u" : "")
        )
      },

      any() {
        return "any character"
      },

      end() {
        return "end of input"
      },

      other(expectation) {
        return expectation.description
      },
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation)
    }

    function describeExpected(expected) {
      const descriptions = expected.map(describeExpectation)
      descriptions.sort()

      if (descriptions.length > 0) {
        let j = 1
        for (let i = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i]
            j++
          }
        }
        descriptions.length = j
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0]

        case 2:
          return descriptions[0] + " or " + descriptions[1]

        default:
          return (
            descriptions.slice(0, -1).join(", ") +
            ", or " +
            descriptions[descriptions.length - 1]
          )
      }
    }

    function describeFound(found) {
      return found ? '"' + literalEscape(found) + '"' : "end of input"
    }

    return (
      "Expected " +
      describeExpected(expected) +
      " but " +
      describeFound(found) +
      " found."
    )
  }
}

function peg$parse(input, options) {
  options = options !== undefined ? options : {}

  const peg$FAILED = {}
  const peg$source = options.grammarSource

  const peg$startRuleFunctions = {
    Filter: peg$parseFilter,
  }
  let peg$startRuleFunction = peg$parseFilter

  const peg$c0 = "or"
  const peg$c1 = "and"
  const peg$c2 = "not"
  const peg$c3 = "("
  const peg$c4 = ")"
  const peg$c5 = "["
  const peg$c6 = "]"
  const peg$c7 = "pr"
  const peg$c8 = "eq"
  const peg$c9 = "ne"
  const peg$c10 = "co"
  const peg$c11 = "sw"
  const peg$c12 = "ew"
  const peg$c13 = "gt"
  const peg$c14 = "lt"
  const peg$c15 = "ge"
  const peg$c16 = "le"
  const peg$c17 = ":"
  const peg$c18 = "."
  const peg$c19 = "true"
  const peg$c20 = "false"
  const peg$c21 = "null"
  const peg$c22 = '"'
  const peg$c23 = "\\"

  const peg$r0 = /^[A-Za-z0-9+.\-:\/]/
  const peg$r1 = /^[A-Za-z]/
  const peg$r2 = /^[A-Za-z0-9_\-]/
  const peg$r3 = /^[0-9]/
  const peg$r4 = /^["\\\/bfnrt"]/
  const peg$r5 = /^["\\"]/
  const peg$r6 = /^[ \t\r\n]/

  const peg$e0 = peg$literalExpectation("or", true)
  const peg$e1 = peg$literalExpectation("and", true)
  const peg$e2 = peg$literalExpectation("not", true)
  const peg$e3 = peg$literalExpectation("(", false)
  const peg$e4 = peg$literalExpectation(")", false)
  const peg$e5 = peg$literalExpectation("[", false)
  const peg$e6 = peg$literalExpectation("]", false)
  const peg$e7 = peg$literalExpectation("pr", true)
  const peg$e8 = peg$literalExpectation("eq", true)
  const peg$e9 = peg$literalExpectation("ne", true)
  const peg$e10 = peg$literalExpectation("co", true)
  const peg$e11 = peg$literalExpectation("sw", true)
  const peg$e12 = peg$literalExpectation("ew", true)
  const peg$e13 = peg$literalExpectation("gt", true)
  const peg$e14 = peg$literalExpectation("lt", true)
  const peg$e15 = peg$literalExpectation("ge", true)
  const peg$e16 = peg$literalExpectation("le", true)
  const peg$e17 = peg$classExpectation(
    [["A", "Z"], ["a", "z"], ["0", "9"], "+", ".", "-", ":", "/"],
    false,
    false,
    false,
  )
  const peg$e18 = peg$literalExpectation(":", false)
  const peg$e19 = peg$literalExpectation(".", false)
  const peg$e20 = peg$classExpectation(
    [
      ["A", "Z"],
      ["a", "z"],
    ],
    false,
    false,
    false,
  )
  const peg$e21 = peg$classExpectation(
    [["A", "Z"], ["a", "z"], ["0", "9"], "_", "-"],
    false,
    false,
    false,
  )
  const peg$e22 = peg$literalExpectation("true", true)
  const peg$e23 = peg$literalExpectation("false", true)
  const peg$e24 = peg$literalExpectation("null", true)
  const peg$e25 = peg$classExpectation([["0", "9"]], false, false, false)
  const peg$e26 = peg$literalExpectation('"', false)
  const peg$e27 = peg$literalExpectation("\\", false)
  const peg$e28 = peg$classExpectation(
    ['"', "\\", "/", "b", "f", "n", "r", "t", '"'],
    false,
    false,
    false,
  )
  const peg$e29 = peg$classExpectation(['"', "\\", '"'], false, false, false)
  const peg$e30 = peg$anyExpectation()
  const peg$e31 = peg$classExpectation(
    [" ", "\t", "\r", "\n"],
    false,
    false,
    false,
  )

  function peg$f0(expr) {
    return expr
  }
  function peg$f1(left, right) {
    return toBinaryOp("or", left, right)
  }
  function peg$f2(left, right) {
    return toBinaryOp("and", left, right)
  }
  function peg$f3(expr) {
    return toNot(expr)
  }
  function peg$f4(expr) {
    return expr
  }
  function peg$f5(attr, filter) {
    return toValuePath(attr, filter)
  }
  function peg$f6(expr) {
    return expr
  }
  function peg$f7(left, right) {
    return toBinaryOp("or", left, right)
  }
  function peg$f8(left, right) {
    return toBinaryOp("and", left, right)
  }
  function peg$f9(expr) {
    return toNot(expr)
  }
  function peg$f10(attr) {
    return toPresent(attr)
  }
  function peg$f11(attr, op, val) {
    return toAttrExp(attr, op, val)
  }
  function peg$f12() {
    return "eq"
  }
  function peg$f13() {
    return "ne"
  }
  function peg$f14() {
    return "co"
  }
  function peg$f15() {
    return "sw"
  }
  function peg$f16() {
    return "ew"
  }
  function peg$f17() {
    return "gt"
  }
  function peg$f18() {
    return "lt"
  }
  function peg$f19() {
    return "ge"
  }
  function peg$f20() {
    return "le"
  }
  function peg$f21(uri, name, sub) {
    return {
      type: "attrPath",
      path: (uri || "") + name + sub.join(""),
    }
  }
  function peg$f22(chars) {
    return chars + ":"
  }
  function peg$f23(name) {
    return "." + name
  }
  function peg$f24(head, tail) {
    return head + tail.join("")
  }
  function peg$f25() {
    return true
  }
  function peg$f26() {
    return false
  }
  function peg$f27() {
    return null
  }
  function peg$f28(num) {
    return num
  }
  function peg$f29(str) {
    return str
  }
  function peg$f30(n) {
    return parseFloat(n)
  }
  function peg$f31(chars) {
    return chars.join("")
  }
  function peg$f32(esc) {
    return JSON.parse('"\\' + esc + '"')
  }
  function peg$f33(char) {
    return char
  }
  let peg$currPos = options.peg$currPos | 0
  let peg$savedPos = peg$currPos
  const peg$posDetailsCache = [{line: 1, column: 1}]
  let peg$maxFailPos = peg$currPos
  let peg$maxFailExpected = options.peg$maxFailExpected || []
  let peg$silentFails = options.peg$silentFails | 0

  let peg$result

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error(
        "Can't start parsing from rule \"" + options.startRule + '".',
      )
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos)
  }

  function offset() {
    return peg$savedPos
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos,
    }
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos)
  }

  function expected(description, location) {
    location =
      location !== undefined
        ? location
        : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location,
    )
  }

  function error(message, location) {
    location =
      location !== undefined
        ? location
        : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location)
  }

  function peg$getUnicode(pos = peg$currPos) {
    const cp = input.codePointAt(pos)
    if (cp === undefined) {
      return ""
    }
    return String.fromCodePoint(cp)
  }

  function peg$literalExpectation(text, ignoreCase) {
    return {type: "literal", text, ignoreCase}
  }

  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {
    return {type: "class", parts, inverted, ignoreCase, unicode}
  }

  function peg$anyExpectation() {
    return {type: "any"}
  }

  function peg$endExpectation() {
    return {type: "end"}
  }

  function peg$otherExpectation(description) {
    return {type: "other", description}
  }

  function peg$computePosDetails(pos) {
    let details = peg$posDetailsCache[pos]
    let p

    if (details) {
      return details
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1
      } else {
        p = pos
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p]
      details = {
        line: details.line,
        column: details.column,
      }

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++
          details.column = 1
        } else {
          details.column++
        }

        p++
      }

      peg$posDetailsCache[pos] = details

      return details
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    const startPosDetails = peg$computePosDetails(startPos)
    const endPosDetails = peg$computePosDetails(endPos)

    const res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    }
    if (offset && peg$source && typeof peg$source.offset === "function") {
      res.start = peg$source.offset(res.start)
      res.end = peg$source.offset(res.end)
    }
    return res
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) {
      return
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos
      peg$maxFailExpected = []
    }

    peg$maxFailExpected.push(expected)
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location)
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location,
    )
  }

  function peg$parseFilter() {
    let s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parse_()
    s2 = peg$parseOrExpr()
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_()
      peg$savedPos = s0
      s0 = peg$f0(s2)
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseOrExpr() {
    let s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    s1 = peg$parseAndExpr()
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_()
      s3 = input.substr(peg$currPos, 2)
      if (s3.toLowerCase() === peg$c0) {
        peg$currPos += 2
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e0)
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_()
        s5 = peg$parseOrExpr()
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0
          s0 = peg$f1(s1, s5)
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseAndExpr()
    }

    return s0
  }

  function peg$parseAndExpr() {
    let s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    s1 = peg$parseNotExpr()
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_()
      s3 = input.substr(peg$currPos, 3)
      if (s3.toLowerCase() === peg$c1) {
        peg$currPos += 3
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e1)
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_()
        s5 = peg$parseAndExpr()
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0
          s0 = peg$f2(s1, s5)
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseNotExpr()
    }

    return s0
  }

  function peg$parseNotExpr() {
    let s0, s1, s2, s3, s4, s5, s6, s7

    s0 = peg$currPos
    s1 = input.substr(peg$currPos, 3)
    if (s1.toLowerCase() === peg$c2) {
      peg$currPos += 3
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$e2)
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_()
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c3
        peg$currPos++
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e3)
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_()
        s5 = peg$parseFilter()
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_()
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c4
            peg$currPos++
          } else {
            s7 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$e4)
            }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0
            s0 = peg$f3(s5)
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsePrimary()
    }

    return s0
  }

  function peg$parsePrimary() {
    let s0, s1, s2, s3, s4, s5

    s0 = peg$parseValuePath()
    if (s0 === peg$FAILED) {
      s0 = peg$parseAttrExp()
      if (s0 === peg$FAILED) {
        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c3
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e3)
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_()
          s3 = peg$parseFilter()
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c4
              peg$currPos++
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$e4)
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0
              s0 = peg$f4(s3)
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      }
    }

    return s0
  }

  function peg$parseValuePath() {
    let s0, s1, s2, s3, s4, s5, s6

    s0 = peg$currPos
    s1 = peg$parseAttrPath()
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c5
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e5)
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_()
        s4 = peg$parseValFilter()
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_()
          if (input.charCodeAt(peg$currPos) === 93) {
            s6 = peg$c6
            peg$currPos++
          } else {
            s6 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$e6)
            }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0
            s0 = peg$f5(s1, s4)
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseValFilter() {
    let s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parse_()
    s2 = peg$parseValOrExpr()
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_()
      peg$savedPos = s0
      s0 = peg$f6(s2)
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseValOrExpr() {
    let s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    s1 = peg$parseValAndExpr()
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_()
      s3 = input.substr(peg$currPos, 2)
      if (s3.toLowerCase() === peg$c0) {
        peg$currPos += 2
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e0)
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_()
        s5 = peg$parseValOrExpr()
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0
          s0 = peg$f7(s1, s5)
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseValAndExpr()
    }

    return s0
  }

  function peg$parseValAndExpr() {
    let s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    s1 = peg$parseValNotExpr()
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_()
      s3 = input.substr(peg$currPos, 3)
      if (s3.toLowerCase() === peg$c1) {
        peg$currPos += 3
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e1)
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_()
        s5 = peg$parseValAndExpr()
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0
          s0 = peg$f8(s1, s5)
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseValNotExpr()
    }

    return s0
  }

  function peg$parseValNotExpr() {
    let s0, s1, s2, s3, s4, s5, s6, s7

    s0 = peg$currPos
    s1 = input.substr(peg$currPos, 3)
    if (s1.toLowerCase() === peg$c2) {
      peg$currPos += 3
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$e2)
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_()
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c3
        peg$currPos++
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e3)
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_()
        s5 = peg$parseValFilter()
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_()
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c4
            peg$currPos++
          } else {
            s7 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$e4)
            }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0
            s0 = peg$f9(s5)
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseAttrExp()
    }

    return s0
  }

  function peg$parseAttrExp() {
    let s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    s1 = peg$parseAttrPath()
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_()
      s3 = input.substr(peg$currPos, 2)
      if (s3.toLowerCase() === peg$c7) {
        peg$currPos += 2
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e7)
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0
        s0 = peg$f10(s1)
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      s1 = peg$parseAttrPath()
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_()
        s3 = peg$parseCompareOp()
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_()
          s5 = peg$parseCompValue()
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0
            s0 = peg$f11(s1, s3, s5)
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    }

    return s0
  }

  function peg$parseCompareOp() {
    let s0, s1

    s0 = peg$currPos
    s1 = input.substr(peg$currPos, 2)
    if (s1.toLowerCase() === peg$c8) {
      peg$currPos += 2
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$e8)
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$f12()
    }
    s0 = s1
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      s1 = input.substr(peg$currPos, 2)
      if (s1.toLowerCase() === peg$c9) {
        peg$currPos += 2
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e9)
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$f13()
      }
      s0 = s1
      if (s0 === peg$FAILED) {
        s0 = peg$currPos
        s1 = input.substr(peg$currPos, 2)
        if (s1.toLowerCase() === peg$c10) {
          peg$currPos += 2
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e10)
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$f14()
        }
        s0 = s1
        if (s0 === peg$FAILED) {
          s0 = peg$currPos
          s1 = input.substr(peg$currPos, 2)
          if (s1.toLowerCase() === peg$c11) {
            peg$currPos += 2
          } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$e11)
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$f15()
          }
          s0 = s1
          if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = input.substr(peg$currPos, 2)
            if (s1.toLowerCase() === peg$c12) {
              peg$currPos += 2
            } else {
              s1 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$e12)
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$f16()
            }
            s0 = s1
            if (s0 === peg$FAILED) {
              s0 = peg$currPos
              s1 = input.substr(peg$currPos, 2)
              if (s1.toLowerCase() === peg$c13) {
                peg$currPos += 2
              } else {
                s1 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$e13)
                }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$f17()
              }
              s0 = s1
              if (s0 === peg$FAILED) {
                s0 = peg$currPos
                s1 = input.substr(peg$currPos, 2)
                if (s1.toLowerCase() === peg$c14) {
                  peg$currPos += 2
                } else {
                  s1 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e14)
                  }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0
                  s1 = peg$f18()
                }
                s0 = s1
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos
                  s1 = input.substr(peg$currPos, 2)
                  if (s1.toLowerCase() === peg$c15) {
                    peg$currPos += 2
                  } else {
                    s1 = peg$FAILED
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e15)
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$f19()
                  }
                  s0 = s1
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos
                    s1 = input.substr(peg$currPos, 2)
                    if (s1.toLowerCase() === peg$c16) {
                      peg$currPos += 2
                    } else {
                      s1 = peg$FAILED
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e16)
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0
                      s1 = peg$f20()
                    }
                    s0 = s1
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0
  }

  function peg$parseAttrPath() {
    let s0, s1, s2, s3, s4

    s0 = peg$currPos
    s1 = peg$parseUriPrefix()
    if (s1 === peg$FAILED) {
      s1 = null
    }
    s2 = peg$parseATTRNAME()
    if (s2 !== peg$FAILED) {
      s3 = []
      s4 = peg$parseSubAttr()
      while (s4 !== peg$FAILED) {
        s3.push(s4)
        s4 = peg$parseSubAttr()
      }
      peg$savedPos = s0
      s0 = peg$f21(s1, s2, s3)
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseUriPrefix() {
    let s0, s1, s2, s3, s4

    s0 = peg$currPos
    s1 = []
    s2 = input.charAt(peg$currPos)
    if (peg$r0.test(s2)) {
      peg$currPos++
    } else {
      s2 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$e17)
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2)
      s2 = input.charAt(peg$currPos)
      if (peg$r0.test(s2)) {
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e17)
        }
      }
    }
    if (input.charCodeAt(peg$currPos) === 58) {
      s2 = peg$c17
      peg$currPos++
    } else {
      s2 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$e18)
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos
      peg$silentFails++
      s4 = peg$parseATTRNAME()
      peg$silentFails--
      if (s4 !== peg$FAILED) {
        peg$currPos = s3
        s3 = undefined
      } else {
        s3 = peg$FAILED
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0
        s0 = peg$f22(s1)
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseSubAttr() {
    let s0, s1, s2

    s0 = peg$currPos
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c18
      peg$currPos++
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$e19)
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseATTRNAME()
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0
        s0 = peg$f23(s2)
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseATTRNAME() {
    let s0, s1, s2, s3

    s0 = peg$currPos
    s1 = input.charAt(peg$currPos)
    if (peg$r1.test(s1)) {
      peg$currPos++
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$e20)
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = []
      s3 = input.charAt(peg$currPos)
      if (peg$r2.test(s3)) {
        peg$currPos++
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e21)
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        s3 = input.charAt(peg$currPos)
        if (peg$r2.test(s3)) {
          peg$currPos++
        } else {
          s3 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e21)
          }
        }
      }
      peg$savedPos = s0
      s0 = peg$f24(s1, s2)
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseCompValue() {
    let s0, s1

    s0 = peg$currPos
    s1 = input.substr(peg$currPos, 4)
    if (s1.toLowerCase() === peg$c19) {
      peg$currPos += 4
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$e22)
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$f25()
    }
    s0 = s1
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      s1 = input.substr(peg$currPos, 5)
      if (s1.toLowerCase() === peg$c20) {
        peg$currPos += 5
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e23)
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$f26()
      }
      s0 = s1
      if (s0 === peg$FAILED) {
        s0 = peg$currPos
        s1 = input.substr(peg$currPos, 4)
        if (s1.toLowerCase() === peg$c21) {
          peg$currPos += 4
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e24)
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$f27()
        }
        s0 = s1
        if (s0 === peg$FAILED) {
          s0 = peg$currPos
          s1 = peg$parseNumber()
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$f28(s1)
          }
          s0 = s1
          if (s0 === peg$FAILED) {
            s0 = peg$currPos
            s1 = peg$parseString()
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$f29(s1)
            }
            s0 = s1
          }
        }
      }
    }

    return s0
  }

  function peg$parseNumber() {
    let s0, s1, s2, s3, s4, s5, s6, s7

    s0 = peg$currPos
    s1 = peg$currPos
    s2 = peg$currPos
    s3 = []
    s4 = input.charAt(peg$currPos)
    if (peg$r3.test(s4)) {
      peg$currPos++
    } else {
      s4 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$e25)
      }
    }
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4)
        s4 = input.charAt(peg$currPos)
        if (peg$r3.test(s4)) {
          peg$currPos++
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e25)
          }
        }
      }
    } else {
      s3 = peg$FAILED
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 46) {
        s5 = peg$c18
        peg$currPos++
      } else {
        s5 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e19)
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = []
        s7 = input.charAt(peg$currPos)
        if (peg$r3.test(s7)) {
          peg$currPos++
        } else {
          s7 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e25)
          }
        }
        if (s7 !== peg$FAILED) {
          while (s7 !== peg$FAILED) {
            s6.push(s7)
            s7 = input.charAt(peg$currPos)
            if (peg$r3.test(s7)) {
              peg$currPos++
            } else {
              s7 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$e25)
              }
            }
          }
        } else {
          s6 = peg$FAILED
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6]
          s4 = s5
        } else {
          peg$currPos = s4
          s4 = peg$FAILED
        }
      } else {
        peg$currPos = s4
        s4 = peg$FAILED
      }
      if (s4 === peg$FAILED) {
        s4 = null
      }
      s3 = [s3, s4]
      s2 = s3
    } else {
      peg$currPos = s2
      s2 = peg$FAILED
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos)
    } else {
      s1 = s2
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$f30(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parseString() {
    let s0, s1, s2, s3

    s0 = peg$currPos
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c22
      peg$currPos++
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$e26)
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = []
      s3 = peg$parseDoubleQuotedChar()
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        s3 = peg$parseDoubleQuotedChar()
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c22
        peg$currPos++
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e26)
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0
        s0 = peg$f31(s2)
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseDoubleQuotedChar() {
    let s0, s1, s2

    s0 = peg$currPos
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c23
      peg$currPos++
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$e27)
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos)
      if (peg$r4.test(s2)) {
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e28)
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0
        s0 = peg$f32(s2)
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      s1 = peg$currPos
      peg$silentFails++
      s2 = input.charAt(peg$currPos)
      if (peg$r5.test(s2)) {
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e29)
        }
      }
      peg$silentFails--
      if (s2 === peg$FAILED) {
        s1 = undefined
      } else {
        peg$currPos = s1
        s1 = peg$FAILED
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e30)
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s0 = peg$f33(s2)
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    }

    return s0
  }

  function peg$parse_() {
    let s0, s1

    s0 = []
    s1 = input.charAt(peg$currPos)
    if (peg$r6.test(s1)) {
      peg$currPos++
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$e31)
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1)
      s1 = input.charAt(peg$currPos)
      if (peg$r6.test(s1)) {
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e31)
        }
      }
    }

    return s0
  }

  function toBinaryOp(operator, left, right) {
    return {type: "logical", operator, left, right}
  }
  function toNot(expr) {
    return {type: "not", expression: expr}
  }
  function toAttrExp(attribute, operator, value) {
    return {type: "comparison", attribute, operator, value}
  }
  function toPresent(attribute) {
    return {type: "present", attribute}
  }
  function toValuePath(attribute, filter) {
    return {type: "valuePath", attribute, filter}
  }

  peg$result = peg$startRuleFunction()

  const peg$success = peg$result !== peg$FAILED && peg$currPos === input.length
  function peg$throw() {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation())
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
    )
  }
  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos,
      peg$success,
      peg$throw: peg$success ? undefined : peg$throw,
    })
  }
  if (peg$success) {
    return peg$result
  } else {
    peg$throw()
  }
}

module.exports = {
  StartRules: ["Filter"],
  SyntaxError: peg$SyntaxError,
  parse: peg$parse,
}
